local function GetClosestTarget()
    local closest, shortest = nil, math.huge
    local mouse = UserInputService:GetMouseLocation()

    for _, player in ipairs(Players:GetPlayers()) do
        if player == LocalPlayer or not player.Character then continue end

        local char = player.Character
        local humanoid = char:FindFirstChildOfClass("Humanoid")
        local part = char:FindFirstChild(Aimbot.LockPart)

        if not humanoid or humanoid.Health <= 0 or not part then continue end

        -- ✅ Team check (but support free-for-all)
        local myTeam, theirTeam = LocalPlayer.Team, player.Team
        if Aimbot.TeamCheck and myTeam and theirTeam and myTeam == theirTeam then
            continue
        end

        -- ✅ Wall check
        if Aimbot.WallCheck then
            local ignore = {}
            for _, v in ipairs(LocalPlayer.Character:GetDescendants()) do table.insert(ignore, v) end
            for _, v in ipairs(char:GetDescendants()) do table.insert(ignore, v) end
            if #Camera:GetPartsObscuringTarget({part.Position}, ignore) > 0 then continue end
        end

        -- ✅ Crosshair distance (not world distance)
        local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
        if not onScreen then continue end

        local dist = (mouse - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
        if dist < shortest then
            closest = player
            shortest = dist
        end
    end

    if closest then
        Aimbot.Locked = closest
    end
end

local function AimAt()
    if not Aimbot.Enabled or not Aimbot.Running then return end

    GetClosestTarget()
    local target = Aimbot.Locked
    if not target or not target.Character then return end

    local char = target.Character
    local part = char:FindFirstChild(Aimbot.LockPart)
    local humanoid = char:FindFirstChildOfClass("Humanoid")

    if not part or not humanoid or humanoid.Health <= 0 then
        Aimbot.Locked = nil
        return
    end

    -- ✅ Bullet drop based on effective range
    local distance = (Camera.CFrame.Position - part.Position).Magnitude
    local dropY = distance > 35 and math.clamp(math.log10(distance - 45) * 5.2, 0, 13) or 0
    local aimPos = part.Position + Vector3.new(0, dropY, 0)

    if Aimbot.LockMode == 2 then
        local screen = Camera:WorldToViewportPoint(aimPos)
        local mousePos = UserInputService:GetMouseLocation()
        mousemoverel((screen.X - mousePos.X) / Aimbot.Sensitivity2, (screen.Y - mousePos.Y) / Aimbot.Sensitivity2)
    else
        if Aimbot.Sensitivity > 0 then
            TweenService:Create(Camera, TweenInfo.new(Aimbot.Sensitivity), {
                CFrame = CFrame.new(Camera.CFrame.Position, aimPos)
            }):Play()
        else
            Camera.CFrame = CFrame.new(Camera.CFrame.Position, aimPos)
        end
    end
end
